openapi: 3.0.3
info:
  title: Meal Recommender API
  description: |
    A tiny service that
    - recommends meals to a user (`/recommend`)
    - finds meals similar to a given one (`/similar/{meal_id}`)
    - returns top “bias” meals (`/top-bias`)
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local development

paths:
  /recommend:
    post:
      summary: Hybrid-retrieval meal recommendations for a user
      operationId: api_recommend
      tags: [Recommend]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecRequest'
      responses:
        '200':
          description: List of recommended meals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecommendItem'
        '404':
          $ref: '#/components/responses/NotFound'

  /similar/{meal_id}:
    get:
      summary: Top-k meals similar to the given meal
      operationId: api_similar_meals
      tags: [Similarity]
      parameters:
        - $ref: '#/components/parameters/MealIdPath'
        - $ref: '#/components/parameters/KQuery'
      responses:
        '200':
          description: Original meal and its similar IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimilarResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /top-bias:
    get:
      summary: Top-k “bias” meals
      operationId: api_top_bias_meals
      tags: [Bias]
      parameters:
        - $ref: '#/components/parameters/KQuery'
      responses:
        '200':
          description: List of top bias meal IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopBiasResponse'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    RecRequest:
      type: object
      required: [user_id]
      properties:
        user_id:
          type: integer
          example: 42
        k:
          type: integer
          minimum: 1
          default: 10
          example: 10

    RecommendItem:
      type: object
      properties:
        id:
          type: integer
          example: 123
        score:
          type: number
          format: float
          example: 0.9876

    SimilarResponse:
      type: object
      properties:
        original:
          type: integer
          description: The requested meal_id
          example: 123
        similar:
          type: array
          items:
            type: integer
          description: k closest meal IDs (excluding the original)
          example: [456, 789, 1011]

    TopBiasResponse:
      type: object
      properties:
        meals:
          type: array
          items:
            type: integer
          description: k highest-bias meal IDs
          example: [111, 222, 333]

  parameters:
    MealIdPath:
      name: meal_id
      in: path
      required: true
      schema:
        type: integer
      example: 123

    KQuery:
      name: k
      in: query
      schema:
        type: integer
        minimum: 1
        default: 10
      example: 10

  responses:
    NotFound:
      description: Resource not found or backend error
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string